let lift1 = document.querySelector(".lift1");
let lift2 = document.querySelector(".lift2");

const lifts = [];
const buttons = document.querySelectorAll("button");
let isLiftMoving = [];

//1
function initializeLifts() {
  lifts.push(lift1);
  lifts.push(lift2);
  isLiftMoving = new Array(lifts.length).fill(false);
}

initializeLifts();



document.addEventListener("DOMContentLoaded", () => {
  buttons.forEach((button) => {
    button.addEventListener("click", () => {
      const floor = button.closest(".floor");
      const floorNumber = parseInt(floor.id.replace("floor", ""));
      handleLiftRequest(floorNumber);
    });
  });

  function handleLiftRequest(targetFloor) {
    let selectedLift = null;
    let minDistance = Infinity;

    lifts.forEach((lift, index) => {
      if (!isLiftMoving[index]) {
        const currentFloor = parseInt(lift.getAttribute("data-floor")) || 1;
        const distance = Math.abs(targetFloor - currentFloor);
        if (distance < minDistance) {
          minDistance = distance;
          selectedLift = index;
        }
      }
    });

    if (selectedLift !== null) {
      moveLiftToFloor(selectedLift, targetFloor);
    } else {
      console.log("All lifts are currently busy.");
    }
  }

  function moveLiftToFloor(liftIndex, targetFloor) {
    const lift = lifts[liftIndex];
    const currentFloor = parseInt(lift.getAttribute("data-floor")) || 1;
    const distance = Math.abs(targetFloor - currentFloor);
    const duration = distance * 2;

    isLiftMoving[liftIndex] = true;

    lift.style.transition = `transform ${duration}s ease-in-out`;
    lift.style.transform = `translateY(-${(targetFloor - 1) * 150}px)`;
    lift.setAttribute("data-floor", targetFloor);

    setTimeout(() => {
      openLiftDoors(lift);
    }, duration * 1000);

    setTimeout(() => {
      closeLiftDoors(lift);
      isLiftMoving[liftIndex] = false;
    }, duration * 1000 + 3000);
  }

  function speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    speechSynthesis.speak(utterance);
  }
  function openLiftDoors(lift) {
    const leftDoor = lift.querySelector(".left-door");
    const rightDoor = lift.querySelector(".right-door");

    leftDoor.classList.add("open-left");
    rightDoor.classList.add("open-right");

    console.log("Lift doors open");
    speak("Lift doors are opening")
  }

  function closeLiftDoors(lift) {
    const leftDoor = lift.querySelector(".left-door");
    const rightDoor = lift.querySelector(".right-door");

    leftDoor.classList.remove("open-left");
    rightDoor.classList.remove("open-right");
    console.log("Lift doors close");
    speak("Lift doors are closing")
  }
});




/* Mobile-friendly adjustments */
@media screen and (max-width: 480px) {
  .building {
      max-width: 100%;
      padding: 0 10px;
  }

  .floor {
      height: 120px; /* Increased height for all floors */
      display: flex;
      align-items: center;
      justify-content: space-between;
  }

  .floor:first-child {
      height: 150px; /* Bigger height for the first floor */
  }

  .lift1, .lift2, .lift3, .lift4 {
      width: 50px; /* Adjusted width */
      height: 110px; /* Adjusted height */
      margin-right: 10px; /* Push lifts to the right */
  }

  .buttonGroup {
      flex-direction: column;
      align-items: flex-end;
      justify-content: center;
      height: 100%;
  }

  .upButton, .downButton {
      margin: 2px 0;
      padding: 5px 10px;
      font-size: 12px;
      width: 60px; /* Make buttons smaller */
  }

  .floorNumber {
      font-size: 12px;
      position: absolute;
      left: 10px;
  }

  .inputs {
      padding: 10px;
  }

  .inputs input, .inputs button {
      margin: 5px 0;
      width: 100%;
      max-width: 100%;
      font-size: 14px;
  }
}
